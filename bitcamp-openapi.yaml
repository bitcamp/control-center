openapi: 3.0.1
info:
  title: Bitcamp Backend
  description: >-
    The backend for the Bitcamp's app, live site, etc.

    Supplements Dashboard.
  contact:
    email: tech@bit.camp
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: https://api.bit.camp
tags:
  - name: login
    description: User Auth
  - name: announce
    description: Announcements and Notifications
  - name: entry
    description: Checking in to Bitcamp
  - name: events
    description: Events within Bitcamp.
  - name: mentorship
    description: Mentorship server
  - name: teams
    description: Team endpoints
paths:
  /login:
    post:
      tags:
        - login
      summary: Log in as a hacker or organizer
      description: Auths a user with the backend for the main app.
      operationId: hackerLogin
      requestBody:
        description: "User credentials"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
      responses:
        200:
          description: successful operation
          headers:
            access-token:
              schema:
                type: string
              description: Client auth token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Invalid login
          content: {}
  /login/admin:
    post:
      tags:
        - login
      summary: Log in as an organizer
      description: Like /login, but with a server-side check that the person is at least an organizer.
      operationId: adminLogin
      requestBody:
        description: "User credentials"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
      responses:
        200:
          description: successful operation
          headers:
            access-token:
              schema:
                type: string
              description: Client auth token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Invalid login
          content: {}
  /announce:
    get:
      tags:
        - announce
      summary: Gets a list of announcements
      description: Gets a list of all announcements
      operationId: listAnnouncements
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Announcement"
    post:
      tags:
        - announce
      summary: Create an announcement
      operationId: createAnnounce
      security:
        - ApiKeyAuth: []
      requestBody:
        description: "Announcement"
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        400:
          description: Invalid body
          content: {}
    put:
      tags:
        - announce
      summary: Update an announcement
      operationId: updateAnnouncement
      security:
        - ApiKeyAuth: []
      parameters:
        - in: "query"
          name: id
          schema:
            type: integer
      requestBody:
        description: "Announcement"
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        400:
          description: Invalid body
          content: {}
    delete:
      tags:
        - announce
      summary: Delete an announcement
      operationId: deleteAnnouncement
      security:
        - ApiKeyAuth: []
      parameters:
        - in: "query"
          name: id
          schema:
            type: integer
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          description: Invalid id
          content: {}
  /announce/subscribe:
    post:
      tags:
        - announce
      summary: Subscribes to push notifications with an expo token.
      description: Accepts a user's expo token, and sends announcements to them
      operationId: notifySubscribe
      security:
        - HackerToken: []
      requestBody:
        description: "User credentials"
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        204:
          description: Successful pairing
        400:
          description: Error
          content: {}
  /entry/checkin:
    post:
      tags:
        - entry
      summary: Checks a user in to Bitcamp
      description: Accepts a hacker's email, marks them as checked in, and returns their info
      operationId: entryCheckin
      security:
        - ApiKeyAuth: []
      requestBody:
        description: "Email"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Invalid body
          content: {}
  /entry/nfc-pair:
    post:
      tags:
        - entry
      summary: Associates a NFC id with a user
      description: Associates a NFC id with a user
      operationId: entryPairing
      security:
        - ApiKeyAuth: []
      requestBody:
        description: "User id, nfc data"
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: user id
                nfc:
                  type: string
                  description: data from NFC band
      responses:
        204:
          description: Paired successful
        400:
          description: Invalid body
          content: {}
  /events:
    get:
      tags:
        - events
      summary: List events
      description: List of all events
      operationId: listEvents
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
  /events/hash:
    get:
      tags:
        - events
      summary: Get hashed list of events
      description: Hashed list of events, so app knows when to update
      operationId: hashEvents
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /events/follow:
    post:
      tags:
        - events
      summary: Follows an event
      description: Allows user to get notified prior to the event.
      operationId: followEvent
      security:
        - HackerToken: []
      responses:
        204:
          description: successful operation
  /events/unfollow:
    post:
      tags:
        - events
      summary: Unfollow an event
      description: Removes user from being notified about an event
      operationId: unfollowEvent
      security:
        - HackerToken: []
      responses:
        204:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /events/following-count:
    get:
      tags:
        - events
      summary: List how many people favorited each event
      description: List of all ids and how many people favorited each
      operationId: listFavoriteCounts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    eventId:
                      type: integer
                    count:
                      type: integer
  /events/following:
    get:
      tags:
        - events
      summary: List a user's followed events
      description: List the ids of each event the user follows
      operationId: listUserFollows
      security:
        - HackerToken: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                uniqueItems: true
  /events/checkin:
    post:
      tags:
        - events
      summary: Checks a user in to an event
      description: Accepts a hacker's email, marks them as checked in, and returns their info
      operationId: eventCheckin
      security:
        - ApiKeyAuth: []
      requestBody:
        description: "Email or NFC"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  nullable: true
                nfcId:
                  type: string
                  nullable: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Invalid body
          content: {}
  /mentorship:
    get:
      tags:
        - mentorship
      description: List questions
      summary: List questions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
  /mentorship/submit:
    post:
      tags:
        - mentorship
      description: Submit question
      summary: Submit question
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /mentorship/claim:
    post:
      tags:
        - mentorship
      description: Claim question
      summary: Claim question
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /teams:
    get:
      tags:
        - teams
      description: Get team scores
      summary: Get team scores
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    color:
                      $ref: "#/component/schemas/Team"
                    points:
                      type: integer
components:
  schemas:
    Team:
      type: string
      enum:
        - "red"
        - "green"
        - "blue"
    LoginBody:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserData:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        userType:
          type: string
          enum:
            - admin
            - organizer
            - sponsor
            - hacker
            - minor
        rsvp:
          type: string
        checkIn:
          type: string
        team:
          $ref: "#/components/schemas/Team"
        foodRestrictions:
          type: boolean
        foodRestrictionsInfo:
          type: string
    Announcement:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        timestamp:
          type: string
          format: date-time
    Event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        caption:
          type: string
        categories:
          type: array
          items:
            type: string
            enum:
              - main
              - food
              - mini
              - workshop
              - sponsored
          uniqueItems: true
        location:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        pointVal:
          type: string
    Question:
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        askerId:
          type: integer
        slackUsername:
          type: string
        location:
          type: string
        claimed:
          type: boolean
  securitySchemes:
    HackerToken:
      type: apiKey
      in: header
      name: access-token
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
